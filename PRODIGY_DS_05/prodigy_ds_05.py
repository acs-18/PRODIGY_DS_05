# -*- coding: utf-8 -*-
"""PRODIGY_DS_05.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11OuD8MHcozVe8XTG4H8i5oqfio2OPlLK
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("/content/RTA Dataset.csv")

data.head()

data.shape
data.info()

data.isnull().sum()

data.duplicated().sum()

data['Accident_severity'].value_counts()

categorical=[i for i in data.columns if data[i].dtype=='O']
print('The categorical variables are',categorical)

for i in categorical:
    data[i].fillna(data[i].mode()[0],inplace=True)

data.isna().sum()

import warnings
warnings.filterwarnings('ignore')

plt.figure(figsize=(8, 6))
sns.countplot(x='Accident_severity', data=data, palette='magma')
plt.title('Distribution of Accident Severity')
plt.xlabel('Accident Severity')
plt.ylabel('Count')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Weather_conditions',palette='magma')
plt.title('Distribution of Weather Conditions')
plt.xlabel('Weather Conditions')
plt.ylabel('Number of Accidents')
plt.xticks(rotation=45)
plt.show()

import numpy as np

plt.figure(figsize=(10,150))
pltnumber = 1

for m in categorical:
    if pltnumber <= data.shape[1] and m!='Pedestrian_movement':
        ax1 = plt.subplot(28,1,pltnumber)
        sns.countplot(data=data, y=m, palette='bright')
        plt.xticks(fontsize=12)
        plt.yticks(fontsize=12)
        plt.title(m.title(), fontsize=14)
        plt.xlabel('')
        plt.ylabel('')
    pltnumber +=1

#visualizing the count of accidents categorized by road type and weather conditions.
heatmap_data = data.pivot_table(index='Road_surface_type', columns='Weather_conditions', values='Accident_severity', aggfunc='count')


plt.figure(figsize=(12, 8))
sns.heatmap(heatmap_data, cmap='YlGnBu', annot=True, fmt='g')
plt.title('Heatmap of Accident Severity by Road Type and Weather Conditions')
plt.xlabel('Weather Conditions')
plt.ylabel('Road Type')
plt.xticks(rotation=45)
plt.show()

numeric_df = data.select_dtypes(include=[np.number])
correlation_matrix = numeric_df.corr()
sns.heatmap(correlation_matrix)
plt.show()

